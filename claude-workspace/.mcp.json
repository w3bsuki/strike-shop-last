{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "./"],
      "env": {},
      "disabled": false,
      "description": "File operations for all agents"
    },
    "github": {
      "command": "npx", 
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
      },
      "description": "Repository management and CI/CD integration"
    },
    "memory": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"],
      "env": {},
      "description": "Cross-session context persistence and learning"
    },
    "postgres": {
      "command": "npx",
      "args": [
        "-y", 
        "@modelcontextprotocol/server-postgres",
        "${DATABASE_URL:-postgresql://localhost:5432/devdb}"
      ],
      "description": "Database operations for backend agent"
    },
    "docker": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-docker"],
      "env": {
        "DOCKER_HOST": "${DOCKER_HOST:-unix:///var/run/docker.sock}"
      },
      "description": "Container management for DevOps agent"
    },
    "21st-dev": {
      "command": "npx",
      "args": ["-y", "@21st-dev/mcp-server"],
      "env": {
        "OPENAI_API_KEY": "${OPENAI_API_KEY}",
        "ANTHROPIC_API_KEY": "${ANTHROPIC_API_KEY}"
      },
      "description": "AI-powered UI/UX development for frontend agent"
    },
    "figma": {
      "command": "npx",
      "args": ["-y", "@figma/mcp-server"],
      "env": {
        "FIGMA_ACCESS_TOKEN": "${FIGMA_ACCESS_TOKEN}"
      },
      "description": "Design token sync and component generation"
    },
    "chromatic": {
      "command": "npx", 
      "args": ["-y", "@chromatic-com/mcp-server"],
      "env": {
        "CHROMATIC_PROJECT_TOKEN": "${CHROMATIC_PROJECT_TOKEN}"
      },
      "description": "Visual testing and Storybook integration"
    },
    "openapi": {
      "command": "npx",
      "args": ["-y", "@openapi-tools/mcp-server"],
      "env": {},
      "description": "API specification generation and validation"
    },
    "terraform": {
      "command": "npx",
      "args": ["-y", "@terraform/mcp-server"],
      "env": {
        "AWS_ACCESS_KEY_ID": "${AWS_ACCESS_KEY_ID}",
        "AWS_SECRET_ACCESS_KEY": "${AWS_SECRET_ACCESS_KEY}",
        "TF_VAR_environment": "${ENVIRONMENT:-development}"
      },
      "description": "Infrastructure as Code for DevOps agent"
    },
    "kubernetes": {
      "command": "npx",
      "args": ["-y", "@kubernetes/mcp-server"],
      "env": {
        "KUBECONFIG": "${KUBECONFIG:-~/.kube/config}"
      },
      "description": "Kubernetes cluster management"
    },
    "monitoring": {
      "command": "npx",
      "args": ["-y", "@prometheus/mcp-server"],
      "env": {
        "PROMETHEUS_URL": "${PROMETHEUS_URL:-http://localhost:9090}",
        "GRAFANA_URL": "${GRAFANA_URL:-http://localhost:3000}",
        "GRAFANA_API_KEY": "${GRAFANA_API_KEY}"
      },
      "description": "Metrics and monitoring integration"
    },
    "security": {
      "command": "npx",
      "args": ["-y", "@security/mcp-server"],
      "env": {
        "SNYK_TOKEN": "${SNYK_TOKEN}",
        "SONARQUBE_URL": "${SONARQUBE_URL}",
        "SONARQUBE_TOKEN": "${SONARQUBE_TOKEN}"
      },
      "description": "Security scanning and vulnerability assessment"
    },
    "testing": {
      "command": "npx",
      "args": ["-y", "@testing/mcp-server"],
      "env": {
        "PLAYWRIGHT_BROWSERS_PATH": "${PLAYWRIGHT_BROWSERS_PATH}",
        "CYPRESS_RECORD_KEY": "${CYPRESS_RECORD_KEY}"
      },
      "description": "Testing framework integration and automation"
    }
  },
  "agentToolAccess": {
    "frontend": {
      "mcpServers": [
        "filesystem",
        "github", 
        "memory",
        "21st-dev",
        "figma",
        "chromatic",
        "testing"
      ],
      "description": "Frontend agent has access to UI/UX tools, design systems, and visual testing"
    },
    "backend": {
      "mcpServers": [
        "filesystem",
        "github",
        "memory", 
        "postgres",
        "docker",
        "openapi",
        "security",
        "testing"
      ],
      "description": "Backend agent has access to databases, APIs, containers, and security tools"
    },
    "devops": {
      "mcpServers": [
        "filesystem",
        "github",
        "memory",
        "docker", 
        "terraform",
        "kubernetes",
        "monitoring",
        "security"
      ],
      "description": "DevOps agent has full infrastructure and monitoring access"
    },
    "testing": {
      "mcpServers": [
        "filesystem",
        "github",
        "memory",
        "postgres",
        "docker",
        "testing",
        "security",
        "monitoring"
      ],
      "description": "Testing agent has access to all testing tools and quality assurance systems"
    },
    "docs": {
      "mcpServers": [
        "filesystem", 
        "github",
        "memory",
        "openapi",
        "figma"
      ],
      "description": "Documentation agent has access to documentation tools and design systems"
    }
  },
  "globalShortcuts": {
    "frontend": {
      "command": "Please consult the @frontend agent for UI/UX development",
      "description": "Launch frontend specialist for React/Vue/Svelte development"
    },
    "backend": {
      "command": "Please consult the @backend agent for server-side development", 
      "description": "Launch backend specialist for API/database development"
    },
    "devops": {
      "command": "Please consult the @devops agent for infrastructure and deployment",
      "description": "Launch DevOps specialist for CI/CD and infrastructure"
    },
    "test": {
      "command": "Please consult the @testing agent for quality assurance",
      "description": "Launch testing specialist for comprehensive QA"
    },
    "docs": {
      "command": "Please consult the @docs agent for documentation",
      "description": "Launch documentation specialist for technical writing"
    },
    "architect": {
      "command": "Please use ultrathink to analyze the architecture and coordinate multiple agents",
      "description": "Use sequential thinking for complex architectural decisions"
    }
  },
  "environmentVariables": {
    "required": [
      "GITHUB_TOKEN",
      "DATABASE_URL",
      "OPENAI_API_KEY", 
      "ANTHROPIC_API_KEY"
    ],
    "optional": [
      "FIGMA_ACCESS_TOKEN",
      "CHROMATIC_PROJECT_TOKEN", 
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "KUBECONFIG",
      "PROMETHEUS_URL",
      "GRAFANA_URL",
      "GRAFANA_API_KEY",
      "SNYK_TOKEN",
      "SONARQUBE_URL",
      "SONARQUBE_TOKEN",
      "PLAYWRIGHT_BROWSERS_PATH",
      "CYPRESS_RECORD_KEY",
      "DOCKER_HOST",
      "ENVIRONMENT"
    ]
  },
  "qualityStandards": {
    "frontend": {
      "performanceTargets": {
        "firstContentfulPaint": "<1.5s",
        "largestContentfulPaint": "<2.5s", 
        "cumulativeLayoutShift": "<0.1",
        "firstInputDelay": "<100ms",
        "bundleSize": "<250KB initial"
      },
      "accessibilityRequirements": "WCAG 2.1 AA compliance",
      "browserSupport": "Last 2 versions of major browsers",
      "testingRequirements": {
        "unitTestCoverage": ">90%",
        "e2eTestCoverage": "Critical user flows",
        "visualRegressionTesting": "All UI components"
      }
    },
    "backend": {
      "performanceTargets": {
        "apiResponseTime": "<200ms simple queries, <1s complex",
        "databaseQueryTime": "<50ms indexed queries", 
        "memoryUsage": "<512MB typical loads",
        "cpuUsage": "<70% normal load",
        "errorRate": "<0.1% production APIs"
      },
      "securityRequirements": [
        "Input validation on all endpoints",
        "Authentication middleware configured", 
        "Authorization checks on protected resources",
        "Rate limiting implemented",
        "SQL injection protection verified",
        "Sensitive data encrypted"
      ],
      "testingRequirements": {
        "unitTestCoverage": ">90%",
        "integrationTestCoverage": "All API endpoints",
        "loadTestingRequired": "Expected production load",
        "securityTestingRequired": "OWASP Top 10"
      }
    },
    "devops": {
      "deploymentRequirements": {
        "zeroDowntimeDeployment": true,
        "rollbackCapability": true,
        "healthChecks": "All services",
        "monitoring": "Comprehensive observability"
      },
      "securityRequirements": [
        "Container image scanning",
        "Infrastructure security scanning",
        "Secrets management implemented",
        "Network security configured"
      ],
      "performanceTargets": {
        "deploymentTime": "<10 minutes",
        "infrastructureProvisioning": "<15 minutes",
        "monitoringLatency": "<30 seconds"
      }
    }
  },
  "bestPracticesLinks": {
    "frontend": {
      "reactBestPractices": "https://react.dev/learn/thinking-in-react",
      "nextjsDocumentation": "https://nextjs.org/docs",
      "tailwindcssGuide": "https://tailwindcss.com/docs/utility-first",
      "accessibilityGuide": "https://web.dev/accessibility/",
      "performanceOptimization": "https://web.dev/performance/",
      "testingBestPractices": "https://testing-library.com/docs/guiding-principles"
    },
    "backend": {
      "apiDesignGuide": "https://restfulapi.net/",
      "databaseDesignPrinciples": "https://www.postgresql.org/docs/current/",
      "securityBestPractices": "https://owasp.org/www-project-api-security/",
      "nodeJsBestPractices": "https://github.com/goldbergyoni/nodebestpractices",
      "fastApiDocumentation": "https://fastapi.tiangolo.com/",
      "monitoringGuide": "https://prometheus.io/docs/practices/"
    },
    "devops": {
      "dockerBestPractices": "https://docs.docker.com/develop/dev-best-practices/",
      "kubernetesPractices": "https://kubernetes.io/docs/concepts/configuration/",
      "terraformGuide": "https://www.terraform.io/docs/",
      "cicdBestPractices": "https://docs.github.com/en/actions/learn-github-actions",
      "monitoringStrategy": "https://grafana.com/docs/",
      "securityHardening": "https://cheatsheetseries.owasp.org/"
    },
    "testing": {
      "testingPyramid": "https://martinfowler.com/articles/practical-test-pyramid.html",
      "playwrightGuide": "https://playwright.dev/docs/intro",
      "performanceTesting": "https://k6.io/docs/",
      "securityTesting": "https://owasp.org/www-project-web-security-testing-guide/",
      "testAutomation": "https://testautomationu.applitools.com/"
    }
  }
}