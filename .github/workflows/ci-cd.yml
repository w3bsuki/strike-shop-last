name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8'

jobs:
  # Code Quality Checks
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm type-check

      - name: Run format check
        run: pnpm format:check

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: npm audit --production

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [quality-checks]
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests (shard ${{ matrix.shard }})
        run: pnpm test:unit -- --shard=${{ matrix.shard }}/4

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests-shard-${{ matrix.shard }}
          name: unit-tests-shard-${{ matrix.shard }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-checks]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: medusa-test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/medusa-test
      REDIS_URL: redis://localhost:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        run: |
          cd my-medusa-store
          npx medusa migrations run

      - name: Run integration tests
        run: pnpm test:integration

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright:install-deps

      - name: Run E2E tests
        run: pnpm test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-scan, unit-tests, integration-tests]
    strategy:
      matrix:
        environment: [staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        env:
          NODE_ENV: ${{ matrix.environment }}
          NEXT_PUBLIC_MEDUSA_BACKEND_URL: ${{ secrets[format('{0}_MEDUSA_BACKEND_URL', matrix.environment)] }}
          NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY: ${{ secrets[format('{0}_MEDUSA_PUBLISHABLE_KEY', matrix.environment)] }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets[format('{0}_STRIPE_PUBLISHABLE_KEY', matrix.environment)] }}
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets[format('{0}_CLERK_PUBLISHABLE_KEY', matrix.environment)] }}
        run: |
          if [ "${{ matrix.environment }}" = "production" ] && [ -f "next.config.production.mjs" ]; then
            cp next.config.production.mjs next.config.mjs
          fi
          pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.environment }}
          path: |
            .next/
            public/
            package.json
            package-lock.json
            next.config.mjs
          retention-days: 7

      - name: Run bundle analysis
        run: pnpm analyze:bundle

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis-${{ matrix.environment }}
          path: bundle-report.json
          retention-days: 30

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-staging

      - name: Deploy to Vercel (Staging)
        id: deploy
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npm i -g vercel
          url=$(vercel --token=$VERCEL_TOKEN --confirm)
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.url }}
        run: |
          curl -f $DEPLOYMENT_URL/api/health || exit 1

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Staging deployment ready: ${{ steps.deploy.outputs.url }}`
            })

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-production

      - name: Deploy Frontend to Vercel (Production)
        id: deploy-frontend
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npm i -g vercel
          url=$(vercel --prod --token=$VERCEL_TOKEN --confirm)
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Deploy Backend to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          npm i -g @railway/cli
          cd my-medusa-store
          railway up --environment production

      - name: Run health checks
        env:
          FRONTEND_URL: ${{ steps.deploy-frontend.outputs.url }}
          BACKEND_URL: ${{ secrets.PRODUCTION_MEDUSA_BACKEND_URL }}
        run: |
          # Check frontend
          curl -f $FRONTEND_URL/api/health || exit 1
          
          # Check backend
          curl -f $BACKEND_URL/health || exit 1

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Production deployment completed
            
            Frontend: ${{ steps.deploy-frontend.outputs.url }}
            Backend: ${{ secrets.PRODUCTION_MEDUSA_BACKEND_URL }}
            
            Commit: ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            Production Deployment ${{ job.status }}
            Frontend: ${{ steps.deploy-frontend.outputs.url }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment to stabilize
        run: sleep 300 # 5 minutes

      - name: Run synthetic monitoring
        env:
          DEPLOYMENT_URL: ${{ needs.deploy-production.outputs.url }}
        run: |
          # Check key pages
          for path in "/" "/[category]" "/product/test" "/checkout" "/api/health"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" $DEPLOYMENT_URL$path)
            if [ $response -ne 200 ]; then
              echo "Page $path returned $response"
              exit 1
            fi
          done

      - name: Check performance metrics
        env:
          DEPLOYMENT_URL: ${{ needs.deploy-production.outputs.url }}
        run: |
          # Run Lighthouse CI
          npm i -g @lhci/cli
          lhci autorun --collect.url=$DEPLOYMENT_URL --assert.preset=lighthouse:recommended

      - name: Update status page
        if: always()
        run: |
          # Update external status page with deployment status
          echo "Updating status page..."