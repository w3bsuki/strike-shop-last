version: '3.9'

services:
  # Backend API (FastAPI) - Staging
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY}-backend:${IMAGE_TAG:-develop}
    container_name: taskflow-backend-staging
    restart: always
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      ENVIRONMENT: staging
      DEBUG: "false"
      CORS_ORIGINS: ${CORS_ORIGINS}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # Email service configuration
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-true}
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      PROMETHEUS_ENABLED: "true"
    expose:
      - "8000"
    volumes:
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Next.js) - Staging
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY}-frontend:${IMAGE_TAG:-develop}
    container_name: taskflow-frontend-staging
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: https://staging-api.taskflow-ai.dev
      NEXT_PUBLIC_WS_URL: wss://staging-api.taskflow-ai.dev
      NODE_ENV: production
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database - Staging
  postgres:
    image: postgres:16-alpine
    container_name: taskflow-postgres-staging
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-network

  # Redis Cache - Staging
  redis:
    image: redis:7-alpine
    container_name: taskflow-redis-staging
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-network

  # Nginx Reverse Proxy with Certbot - Staging
  nginx:
    image: nginx:alpine
    container_name: taskflow-nginx-staging
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - ./infrastructure/certbot/www:/var/www/certbot:ro
      - ./infrastructure/certbot/conf:/etc/letsencrypt:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - taskflow-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: taskflow-certbot-staging
    restart: unless-stopped
    volumes:
      - ./infrastructure/certbot/www:/var/www/certbot:rw
      - ./infrastructure/certbot/conf:/etc/letsencrypt:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - taskflow-network

  # Celery Worker - Staging
  celery:
    image: ghcr.io/${GITHUB_REPOSITORY}-backend:${IMAGE_TAG:-develop}
    container_name: taskflow-celery-staging
    restart: always
    command: celery -A app.celery worker --loglevel=info --concurrency=2
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY: ${SECRET_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - celery_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskflow-network

  # Celery Beat - Staging
  celery-beat:
    image: ghcr.io/${GITHUB_REPOSITORY}-backend:${IMAGE_TAG:-develop}
    container_name: taskflow-celery-beat-staging
    restart: always
    command: celery -A app.celery beat --loglevel=info
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY: ${SECRET_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskflow-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: taskflow-prometheus-staging
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    expose:
      - "9090"
    networks:
      - taskflow-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: taskflow-grafana-staging
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SERVER_ROOT_URL: https://staging.taskflow-ai.dev/grafana
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafana_data:/var/lib/grafana
    expose:
      - "3000"
    depends_on:
      - prometheus
    networks:
      - taskflow-network

  # PostgreSQL backup container
  postgres-backup:
    image: postgres:16-alpine
    container_name: taskflow-postgres-backup-staging
    restart: always
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: "7"
    volumes:
      - ./infrastructure/backup/scripts:/scripts:ro
      - postgres_backups:/backups
    command: ["/scripts/backup-entrypoint.sh"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskflow-network

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: taskflow-loki-staging
    restart: always
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./infrastructure/monitoring/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - loki_data:/loki
    expose:
      - "3100"
    networks:
      - taskflow-network

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: taskflow-promtail-staging
    restart: always
    command: -config.file=/etc/promtail/promtail-config.yaml
    volumes:
      - ./infrastructure/monitoring/promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
      - /var/log:/var/log:ro
      - backend_logs:/app/logs:ro
      - celery_logs:/celery/logs:ro
      - nginx_logs:/nginx/logs:ro
    depends_on:
      - loki
    networks:
      - taskflow-network

  # Blackbox exporter for uptime monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: taskflow-blackbox-staging
    restart: always
    volumes:
      - ./infrastructure/monitoring/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    expose:
      - "9115"
    networks:
      - taskflow-network

  # PostgreSQL exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: taskflow-postgres-exporter-staging
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    expose:
      - "9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskflow-network

  # Redis exporter for cache metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: taskflow-redis-exporter-staging
    restart: always
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    expose:
      - "9121"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - taskflow-network

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: taskflow-cadvisor-staging
    restart: always
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    expose:
      - "8080"
    networks:
      - taskflow-network

networks:
  taskflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  postgres_backups:
  redis_data:
  backend_logs:
  celery_logs:
  nginx_logs:
  prometheus_data:
  grafana_data:
  loki_data: