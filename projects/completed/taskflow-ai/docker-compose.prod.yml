version: '3.9'

services:
  # Backend API (FastAPI) - Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskflow-backend
    restart: always
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: production
      DEBUG: "false"
      CORS_ORIGINS: ${CORS_ORIGINS}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    expose:
      - "8000"
    volumes:
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - taskflow-network

  # Frontend (Next.js) - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: taskflow-frontend
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - taskflow-network

  # PostgreSQL Database - Production
  postgres:
    image: postgres:16-alpine
    container_name: taskflow-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-network

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    container_name: taskflow-redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-network

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    container_name: taskflow-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - taskflow-network

  # Celery Worker - Production
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskflow-celery
    restart: always
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY: ${SECRET_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - celery_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - taskflow-network

  # Celery Beat - Production
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskflow-celery-beat
    restart: always
    command: celery -A app.celery beat --loglevel=info
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - taskflow-network

networks:
  taskflow-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  celery_logs:
  nginx_logs: